#Naive search

def naive_search(l,target):
    for x in range(len(l)):
        if l[x] == target:
            return x
        else:
            pass

#Binary search ; Divide and conquer

def binary_search(l,target,low=None,high=None):
    if low is None:
        low = 0
    if high is None:
        high = len(l)-1
    
    mid_point = (low+high)//2 #double dash for approx value and no decimal
    
    if l[mid_point] == target:
        return mid_point
    elif target < l[mid_point]:
        return binary_search(l,target,low,mid_point-1)
    else:
        #target > binary search
        return binary_search(l,target,mid_point+1,high)
        




#test case example comparing naive search vs binary search
import random
import time
length = 10000
target = int(input("Enter your target"))
sorted_list = set()
while len(sorted_list) < length:
        sorted_list.add(random.randint(0,length))  

sorted_list = sorted(list(sorted_list))


start = time.time() #gets time rn
for target in sorted_list:
    naive_search(sorted_list,target)
end = time.time()
print("Naive search time : ",(end - start)/length, 'seconds')



start = time.time() #gets time rn
for target in sorted_list:
    binary_search(sorted_list,target)
end = time.time()
print("binary search time : ",(end - start)/length, 'seconds')
       
