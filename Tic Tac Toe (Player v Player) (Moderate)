#TIC TAC TOW BOARD
def display_board(board):
    print("     "+"|"+"     "+"|"+"     ")
    print(f"  {board[7]}  "+"|"+f"  {board[8]}  "+"|"+f"  {board[9]}  ")    
    print("     "+"|"+"     "+"|"+"     ") 
    print("-----------------")
    print("     "+"|"+"     "+"|"+"     ")
    print(f"  {board[4]}  "+"|"+f"  {board[5]}  "+"|"+f"  {board[6]}  ")    
    print("     "+"|"+"     "+"|"+"     ")
    print("-----------------")
    print("     "+"|"+"     "+"|"+"     ")
    print(f"  {board[1]}  "+"|"+f"  {board[2]}  "+"|"+f"  {board[3]}  ")    
    print("     "+"|"+"     "+"|"+"     ")
            
#TAKE PLAYER'S MARKER AND ALLOT THEM ACCORDING TO USER'S CHOICE            
def player_input():
    p1 = ''
    p2 = ''
    while p1 not in ('X','O'):
        p1 = input("Enter you desired sign, X or O : ")
        if p1 not in ('X','O'):
            print("Please enter a valid sign")
        elif p1 == 'X':
            return ('X','O')
        else:
            return ('O','X')
        
#PLACE MARKER ON BOARD
def place_marker(board,marker,position):
    board[position] = marker
    return board
            
#CHECK MARKER ON BOARD            
def win_check(board,mark):
    return ((board[7]==mark and board[8]==mark and board[9]==mark) or #top hor
    (board[4]==mark and board[5]==mark and board[6]==mark) or        #mid hor
    (board[1]==mark and board[2]==mark and board[3]==mark) or        #bot hor
    (board[7]==mark and board[4]==mark and board[1]==mark) or        #left ver
    (board[8]==mark and board[5]==mark and board[2]==mark) or        #mid ver
    (board[9]==mark and board[6]==mark and board[3]==mark) or        #right ver
    (board[7]==mark and board[5]==mark and board[3]==mark) or        #diagonal
    (board[9]==mark and board[5]==mark and board[1]==mark))           #diagonal 
    


#SELECT WHO GOES FIRST
import random

def choose_first():
    player1 = random.randint(1,3)
    if player1==1:
        return 'player1'
    else:
        return 'player2'
        
        
#CHECK IF BOARD IS FULL OR NOT        
def full_board_check(board):
    counter = 0
    for i in range(1,10):
        if board[i].isspace():
            counter+=1
    return counter==0
    
#ASKING FOR REPLAY   
def replay():
    replay = input("Do you want to replay? (Y/N) : ")
    if replay.lower()[0]=='y':
        return True
    else:
        return False
        
#GAME LOGIC

print("Welcome to Tic Tac Toe!")

while True:
    #reset board
    theboard = [' ']*10
    turn = choose_first()
    print(f"{turn} will go first")
    if turn=='player1':
        player1_marker,player2_marker = player_input()
    else:
        player2_marker,player1_marker = player_input()
    print(player1_marker)
    print(player2_marker)
    
    play_game = input("Are you ready to play? (Y or N) : ")
    if play_game.lower()[0]=='y':
        game_on = True
    else:
        game_on = False
        
    while game_on:
        clear_output()
        if turn == 'player1':
            display_board(theboard)
            position = player_choice(theboard)
            place_marker(theboard,player1_marker,position)
            
            if win_check(theboard,player1_marker):
                print("Congratulations! Player 1 has won the game!")
                game_on = False
            else:
                if full_board_check(theboard):
                    display_board(theboard)
                    print("The game is a draw!")
                    break
                else:
                    turn = 'player2'
        else:
            clear_output()
            display_board(theboard)
            position = player_choice(theboard)
            place_marker(theboard,player2_marker,position)
            
            if win_check(theboard,player2_marker):
                print("Congratulations! Player 2 has won the game!")
                game_on = False
            else:
                if full_board_check(theboard):
                    display_board(theboard)
                    print("The game is a draw!")
                    break
                else:
                    turn = 'player1'
                    
    if not replay():
        clear_output()
        print("Thank you for playing!")
        break
        
